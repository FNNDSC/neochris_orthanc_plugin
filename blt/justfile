# Build plugin and start Orthanc
up *args:
    cargo build && podman-compose up {{args}}

# Shut down and delete volumes
down *args:
    podman-compose down -v {{args}}

# Start a test run for the SAG-ANON dataset
test-run:
    xh :8042/blt/studies MRN=BLT-MSB-123 Anon_PatientID=BCH01 PatientName='CMB-MEL^PEOPLE' \
                         Anon_PatientName=BCH01 PatientBirthDate=06/20/1988 \
                         Search_AccessionNumber=2543410778 Anon_AccessionNumber=bch01-visit1 \
                         Anon_PatientBirthDate=19010101

# Rebuild plugin and restart Orthanc
restart:
    cargo build
    podman-compose restart dev

# Delete all patients from Orthanc
reset:
    for api in patients jobs queries; do \
      xh :8042/$api | jaq -r '.[]' | xargs -I _ xh DELETE :8042/$api/_ ; \
    done

# Push a directory of DICOM files to PACS.
store dir:
    @just _upload_all /modalities/PACS/store-straight "{{dir}}"

# Upload a directory of DICOM files to DEV.
upload dir:
    @just _upload_all /instances "{{dir}}"

# Download and store test data
get-data: _download_data_from_gcs (upload 'data/CMB-MEL') _store_cmbmel_data

# Download sample data from GCS, if necessary
_download_data_from_gcs:
    @if [ -z "$(find data/CMB-MEL -maxdepth 1 -type f -name '*.dcm' -print -quit)" ]; then \
      mkdir data/CMB-MEL \
      && cd data/CMB-MEL \
      && s5cmd --no-sign-request --endpoint-url https://storage.googleapis.com run \
      ../manifest_gcs.s5cmd ; \
    fi

# Modify the CMB-MEL data in Orthanc so that it all belongs to the same study,
# push it to PACS, then delete it from DEV.
_store_cmbmel_data:
    xh :8042/tools/find Level=Patient Query:='{"PatientName": "MSB-*", "PatientID": "MSB-*"}' \
      | jaq -r '.[]' \
      | xargs -I _ xh --ignore-stdin --print=b :8042/patients/_/modify \
        KeepSource:=false Synchronous:=true Force:=true \
        Replace:='{"PatientID": "BLT-MSB-123", "PatientName": "CMB-MEL^PEOPLE", "PatientBirthDate": "19880620"}' \
      | jaq -r '.Path' | head -n 1 \
      | xargs -I _ xh --ignore-stdin --print=b GET :8042_ | jaq -r '.Studies[]' \
      | xargs -I _ xh --ignore-stdin --print=b :8042/studies/_/modify \
        KeepSource:=false Synchronous:=true Force:=true \
        Replace:='{"AccessionNumber": "2543410778", "StudyDate": "20090830", "StudyDescription": "Small mash of data from CMB-MEL", "StudyInstanceUID": "1.2.826.0.1.3680043.8.498.3145497789427891513037498953281180576"}' \
      | jaq -r '.PatientID' | head -n 1 \
      | xargs -I _ xh --ignore-stdin --print=b :8042/modalities/PACS/store \
        Synchronous:=true StorageCommitment:=true Resources:='["_"]' \
      | jaq -r '.StorageCommitmentTransactionUID' \
      | xargs -I _ xh --ignore-stdin POST :8042/storage-commitment/_/remove

# Upload a directory of DICOM files to an API endpoint.
_upload_all api_path dir:
    find '{{dir}}' -type f -name '*.dcm' \
        | rust-parallel --progress-bar --jobs 2 --discard-output=all just _upload_instance "{{api_path}}"

# Upload a DICOM file to the specified API endpoint.
_upload_instance api_path file:
    curl -sSfX POST -H 'Expect:' -H 'Content-Type: application/dicom' -T '{{file}}' -o /dev/null \
         "http://localhost:8042{{api_path}}"
