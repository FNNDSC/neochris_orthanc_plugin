# Build plugin and start Orthanc
up *args: build
    podman-compose up {{args}}

# Shut down and delete volumes
down *args:
    podman-compose down -v {{args}}

# Build Rust library
build:
    cargo build --lib

# Start a test run for the SAG-ANON dataset
test-run:
    xh :8042/blt/studies MRN=BLT-MSB-123 Anon_PatientID=BCH01 PatientName='CMB-MEL^PEOPLE' \
                         Anon_PatientName=BCH01 PatientBirthDate=06/20/1988 \
                         Search_AccessionNumber=2543410778 Anon_AccessionNumber=bch01-visit1 \
                         Anon_PatientBirthDate=19010101

# Build Orthanc container image with BLT plugin.
build-image:
    podman build -t ghcr.io/fnndsc/orthanc-blt:latest -f ./Containerfile .. \
        --build-arg CARGO_TERM_COLOR=always \
        --annotation org.opencontainers.image.title='BLT Orthanc' \
        --annotation org.opencontainers.image.description='Orthanc with BLT plugin' \
        --annotation org.opencontainers.image.source=https://github.com/FNNDSC/neochris_orthanc_plugin \
        --annotation org.opencontainers.image.revision=$(git show-ref -s HEAD) \
        --annotation org.opencontainers.image.licenses='GPL-3.0'

# Rebuild plugin and restart Orthanc
restart: build
    podman-compose restart dev

# Delete all patients from Orthanc
reset:
    for api in patients jobs queries; do \
      xh :8042/$api | jaq -r '.[]' | xargs -I _ xh DELETE :8042/$api/_ ; \
    done
    xh -a peer:peer1234 :8043/patients | jaq -r '.[]' \
      | xargs -I _ xh -a peer:peer1234 DELETE :8043/patients/_

# Download and store test data
get-data: _download_data_from_gcs (upload 'data/CMB-MEL') _store_cmbmel_data

# Download sample data from GCS, if necessary
_download_data_from_gcs:
    @if [ -z "$(find data/CMB-MEL -maxdepth 1 -type f -name '*.dcm' -print -quit)" ]; then \
      mkdir data/CMB-MEL \
      && cd data/CMB-MEL \
      && s5cmd --no-sign-request --endpoint-url https://storage.googleapis.com run \
      ../manifest_gcs.s5cmd ; \
    fi

# Modify the CMB-MEL data in Orthanc so that it all belongs to the same study,
# push it to PACS, then delete it from DEV.
_store_cmbmel_data:
    xh :8043/tools/find Level=Patient Query:='{"PatientName": "MSB-*", "PatientID": "MSB-*"}' \
      | jaq -r '.[]' \
      | xargs -I _ xh --ignore-stdin --print=b :8043/patients/_/modify \
        KeepSource:=false Synchronous:=true Force:=true \
        Replace:='{"PatientID": "BLT-MSB-123", "PatientName": "CMB-MEL^PEOPLE", "PatientBirthDate": "19880620"}' \
      | jaq -r '.Path' | head -n 1 \
      | xargs -I _ xh --ignore-stdin --print=b GET :8043_ | jaq -r '.Studies[]' \
      | xargs -I _ xh --ignore-stdin --print=b :8043/studies/_/modify \
        KeepSource:=false Synchronous:=true Force:=true \
        Replace:='{"AccessionNumber": "2543410778", "StudyDate": "20090830", "StudyDescription": "Small mash of data from CMB-MEL", "StudyInstanceUID": "1.2.826.0.1.3680043.8.498.3145497789427891513037498953281180576"}'

# Upload a directory of DICOM files to PACS.
upload dir:
    find '{{dir}}' -type f -name '*.dcm' \
        | rust-parallel --progress-bar --jobs 2 --discard-output=all just _upload_instance

# Upload a DICOM file to PACS.
_upload_instance file:
    xh POST :8043/instances Expect: Content-Type:application/dicom < '{{file}}'

# Assign an AccessionNumber to each study which doesn't have one.
assign-nums:
    bun run scripts/assignAccessionNumbers.ts

# Check job statuses.
jobs:
    bun run scripts/reportJobStatuses.ts

# Dump a CSV file for processing all studies in Orthanc via BLT protocol.
csv:
    bun run scripts/createCsv.ts

# Dump OpenAPI spec for Orthanc + BLT plugin.
openapi:
    bun run scripts/modifyOrthancOpenAPI.ts | yq -p json -o yaml
