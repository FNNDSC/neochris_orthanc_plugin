{
  // The logical name of this instance of Orthanc. This one is
  // displayed in Orthanc Explorer and at the URI "/system".
  "Name" : "NeoChRIS Test",

  // Path to the directory that holds the heavyweight files (i.e. the
  // raw DICOM instances). Backslashes must be either escaped by
  // doubling them, or replaced by forward slashes "/".
  "StorageDirectory" : "/var/lib/orthanc/db",

  // Path to the directory that holds the SQLite index (if unset, the
  // value of StorageDirectory is used). This index could be stored on
  // a RAM-drive or a SSD device for performance reasons.
  "IndexDirectory" : "/var/lib/orthanc/db",

  // List of paths to the custom Lua scripts that are to be loaded
  // into this instance of Orthanc
  "LuaScripts" : [
    "ReceivedInstanceFilter.lua"
  ],

  // The period (in seconds) between 2 calls of the "OnHeartBeat"
  // lua callback.  O means the heart beat is disabled.
  "LuaHeartBeatPeriod" : 0,

  // List of paths to the plugins that are to be loaded into this
  // instance of Orthanc (e.g. "./libPluginTest.so" for Linux, or
  // "./PluginTest.dll" for Windows). These paths can refer to
  // folders, in which case they will be scanned non-recursively to
  // find shared libraries. Backslashes must be either escaped by
  // doubling them, or replaced by forward slashes "/".
  "Plugins" : [ 
    "/usr/share/orthanc/plugins", "/usr/local/share/orthanc/plugins",
    "/target/debug"
  ],

  // Custom settings for the BLT plugin.
  "Blt" : {
    // Report INFO level logging as WARNING.
    "Verbose" : true
  },

  // Maximum number of processing jobs that are simultaneously running
  // at any given time. A value of "0" indicates to use all the
  // available CPU logical cores. To emulate Orthanc <= 1.3.2, set
  // this value to "1".
  "ConcurrentJobs" : 2,

  // Defines the number of threads that are used to execute each type of
  // jobs (for the jobs that can be parallelized).
  // A value of "0" indicates to use all the available CPU logical cores.
  // (new in Orthanc 1.11.3)
  "JobsEngineThreadsCount" : {
    "ResourceModification": 1     // for /anonymize, /modify
  },

  // Maximum number of completed jobs that are kept in memory. A
  // processing job is considered as complete once it is tagged as
  // "Success" or "Failure". Since Orthanc 1.5.0, a value of "0"
  // indicates to keep no job in memory (i.e. jobs are removed from
  // the history as soon as they are completed), which prevents the
  // use of some features of Orthanc (typically, synchronous mode in
  // REST API) and should be avoided for non-developers.
  "JobsHistorySize" : 10000,

  // Whether to save the jobs into the Orthanc database. If this
  // option is set to "true", the pending/running/completed jobs are
  // automatically reloaded from the database if Orthanc is stopped
  // then restarted (except if the "--no-jobs" command-line argument
  // is specified). This option should be set to "false" if multiple
  // Orthanc servers are using the same database (e.g. if PostgreSQL
  // or MariaDB/MySQL is used).
  "SaveJobs" : false,

  /**
   * Configuration of the HTTP server
   **/

  // Enable the HTTP server. If this parameter is set to "false",
  // Orthanc acts as a pure DICOM server. The REST API and Orthanc
  // Explorer will not be available.
  "HttpServerEnabled" : true,
  "RemoteAccessAllowed" : true,
  "AuthenticationEnabled" : false,

  // Enable/disable the Orthanc Explorer Web user interface. This
  // option is only meaningful if the "HttpServerEnabled" option is
  // set to "true" (new in Orthanc 1.8.2).
  "OrthancExplorerEnabled" : true,

  // HTTP port for the REST services and for the GUI
  "HttpPort" : 8042,

  // When the following option is "true", if an error is encountered
  // while calling the REST API, a JSON message describing the error
  // is put in the HTTP answer. This feature can be disabled if the
  // HTTP client does not properly handles such answers.
  "HttpDescribeErrors" : true,

  // Enable the publication of the content of the Orthanc server as a
  // WebDAV share (new in Orthanc 1.8.0). On the localhost, the WebDAV
  // share is mapped as "http://localhost:8042/webdav/".
  "WebDavEnabled" : false,

  /**
   * Configuration of the DICOM server
   **/

  // Enable the DICOM server. If this parameter is set to "false",
  // Orthanc acts as a pure REST server. It will not be possible to
  // receive files or to do query/retrieve through the DICOM protocol.
  "DicomServerEnabled" : true,

  // The DICOM Application Entity Title (cannot be longer than 16
  // characters)
  "DicomAet" : "DEV",

  // Check whether the called AET corresponds to the AET of Orthanc
  // during an incoming DICOM SCU request
  "DicomCheckCalledAet" : false,

  // The DICOM port
  "DicomPort" : 4242,
 
  /**
   * Network topology
   **/

  // The list of the known DICOM modalities. This option is ignored if
  // "DicomModalitiesInDatabase" is set to "true", in which case you
  // must use the REST API to define modalities.
  "DicomModalities" : {
    "PACS" : [ "PACS", "pacs", 4242 ]
  },

  // Whether to store the DICOM modalities in the Orthanc database
  // instead of in this configuration file (new in Orthanc 1.5.0)
  "DicomModalitiesInDatabase" : false,

  // The list of the known Orthanc peers. This option is ignored if
  // "OrthancPeersInDatabase" is set to "true", in which case you must
  // use the REST API to define Orthanc peers.
  "OrthancPeers" : {
     "peer" : [ "http://peer:8042", "peer", "peer1234" ]
  },

  // Whether to store the Orthanc peers in the Orthanc database
  // instead of in this configuration file (new in Orthanc 1.5.0)
  "OrthancPeersInDatabase" : false,

  // Parameters of the HTTP proxy to be used by Orthanc. If set to the
  // empty string, no HTTP proxy is used. For instance:
  //   "HttpProxy" : "192.168.0.1:3128"
  //   "HttpProxy" : "proxyUser:proxyPassword@192.168.0.1:3128"
  "HttpProxy" : "",

  // If set to "true", debug messages from libcurl will be issued
  // whenever Orthanc makes an outgoing HTTP request. This is notably
  // useful to debug HTTPS-related problems.
  "HttpVerbose" : false,

  // Set the timeout for HTTP requests issued by Orthanc (in seconds).
  "HttpTimeout" : 60,

  // "Transfers" : {
  //   "Threads" : 6,             // Number of worker threads for one transfer
  //   "BucketSize" : 4096,       // Optimal size for a bucket (in KB)
  //   "CacheSize" : 128,         // Size of the memory cache to process DICOM files (in MB)
  //   "MaxPushTransactions" : 4, // Maximum number of simultaneous receptions in push mode
  //   "MaxHttpRetries" : 0,      // Maximum number of HTTP retries for one bucket
  //   "PeerConnectivityTimeout": 2, // HTTP Timeout (in seconds) used when checking if a remote peer has the transfer plugin enabled in /transfers/peers GET route
  //   "PeerCommitTimeout": 600   // HTTP Timeout (in seconds) used when committing a push transaction (new in 1.6 - not released yet)
  // },

  // Enable the verification of the peers certificates during HTTPS 
  // requests. Setting this option to false is equivalent to the 
  // "--insecure" curl option. Pay attention that setting this option 
  // to "false" results in security risks!
  // Reference: http://curl.haxx.se/docs/sslcerts.html
  "HttpsVerifyPeers" : true,

  // Path to the CA (certification authority) certificates to validate
  // peers in HTTPS requests. From curl documentation ("--cacert"
  // option): "Tells curl to use the specified certificate file to
  // verify the peers. The file may contain multiple CA
  // certificates. The certificate(s) must be in PEM format." On
  // Debian-based systems, this option can be set to
  // "/etc/ssl/certs/ca-certificates.crt".
  // Starting with Orthanc 1.12.6 and provided that Orthanc has been
  // built with libcurl > 8.2.0, when this option is empty,
  // Orthanc uses the operating system native CA store ("--ca-native"
  // option)
  "HttpsCACertificates" : "/etc/ssl/certs/ca-certificates.crt",

  // Number of threads that are used by the embedded HTTP server.
  "HttpThreadsCount" : 50,

  // Maximum number of completed jobs that are kept in memory. A
  // processing job is considered as complete once it is tagged as
  // "Success" or "Failure". Since Orthanc 1.5.0, a value of "0"
  // indicates to keep no job in memory (i.e. jobs are removed from
  // the history as soon as they are completed), which prevents the
  // use of some features of Orthanc (typically, synchronous mode in
  // REST API) and should be avoided for non-developers.
  "JobsHistorySize" : 10,

  // Whether to save the jobs into the Orthanc database. If this
  // option is set to "true", the pending/running/completed jobs are
  // automatically reloaded from the database if Orthanc is stopped
  // then restarted (except if the "--no-jobs" command-line argument
  // is specified). This option should be set to "false" if multiple
  // Orthanc servers are using the same database (e.g. if PostgreSQL
  // or MariaDB/MySQL is used).
  "SaveJobs" : true,

  // Set the timeout while serving HTTP requests by the embedded Web
  // server, in seconds. This corresponds to option
  // "request_timeout_ms" of Mongoose/Civetweb. It will set the socket
  // options "SO_RCVTIMEO" and "SO_SNDTIMEO" to the specified value.
  "HttpRequestTimeout" : 30,

  // Deidentify/anonymize the contents of the logs (notably C-FIND,
  // C-GET, and C-MOVE queries submitted to Orthanc) according to
  // Table E.1-1 of the DICOM standard (new in Orthanc 1.8.2).
  // Note that, the DICOM logs at TRACE level are not deidentified !
  "DeidentifyLogs" : false,

  "OrthancExplorer2" : {
    "IsDefaultOrthancUI": true,
    "Theme": "dark"
  },

  "AdvancedStorage": {
    "Enable": true,
    "DelayedDeletion": {
      "Enable": true
    }
  }
}
